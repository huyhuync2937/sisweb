import{G as e,a as t,b as r,c as s,d as o,e as i,f as a,g as n,h as d,D as l,i as c}from"./dx-grid-a759e2f9.js";import{k as p}from"./key-ffa272aa.js";import"./dx-html-element-base-e951cb17.js";import"./data-qa-utils-8be7c726.js";import"./dx-html-element-pointer-events-helper-3a1681ea.js";import"./dom-554d0cc7.js";import"./_commonjsHelpers-41cdd1e7.js";import"./tslib.es6-d65164b3.js";import"./common-48ec40e2.js";import"./browser-3fc721b7.js";import"./eventhelper-8bcec49f.js";import"./constants-7c047c0d.js";import"./devices-17b9ba08.js";import"./dx-license-7b9121f4.js";import"./css-classes-c63af734.js";import"./dx-ui-handlers-bridge-c2148178.js";import"./dx-scroll-viewer-652b9cba.js";import"./scroll-viewer-css-classes-e724f203.js";import"./keyboard-navigation-strategy-5d0ea026.js";import"./focushelper-3e91fef2.js";import"./logicaltreehelper-39bf56ef.js";import"./layouthelper-b10d5065.js";import"./point-e4ec110e.js";import"./dom-utils-d057dcaa.js";import"./custom-events-helper-e7f279d3.js";import"./focus-utils-d076e44c.js";import"./touch-6a322081.js";import"./disposable-d2c2d283.js";import"./dx-virtual-scroll-viewer-a65ecbb8.js";import"./thumb-31d768d7.js";import"./dx-check-internal-15186bea.js";import"./dragging-helper-d7bfd9f1.js";import"./popup-72173b03.js";import"./rafaction-bba7928b.js";import"./screenhelper-c6dce9b0.js";import"./transformhelper-ebad0156.js";import"./positiontracker-83785493.js";import"./branch-aebd078a.js";import"./property-4ec0b52d.js";import"./custom-element-267f9a21.js";import"./lit-element-462e7ad3.js";import"./portal-b3727c25.js";import"./constants-a4904a3f.js";import"./const-90026e45.js";import"./dx-ui-element-38985cf5.js";import"./lit-element-base-be4d2d51.js";import"./capture-manager-2bbac3a3.js";import"./nameof-factory-64d95f5b.js";import"./focustrap-f9759d02.js";import"./tabbable-7d32c528.js";import"./grid-scroll-utils-d3fe1de0.js";import"./svg-utils-3c1b4ead.js";class m{}m.TreeNodeExpandControlsCell=`${e.TableCell}.dxbl-grid-tree-node-expand-controls-cell`,m.TreeNodeExpandControlsContainer=`${m.TreeNodeExpandControlsCell} > .dxbl-grid-tree-node-expand-controls-container`,m.TreeNodeExpandButton=`${m.TreeNodeExpandControlsContainer} > .dxbl-grid-tree-node-expand-button`;class u extends t{getDropPosition(){if(!this.draggableRowContext)return r.Append;const{currentCursorPosition:e,mouseOverElementRect:s,mouseOverElement:o}=this.draggableRowContext;return o&&s?t.isEmptyRow(o)?r.Append:t.isDataRow(o)?this.isRestrictedArea(e.y,s)||u.isCursorInMiddle(e.y,s)?r.Inside:this.isPositionalDropAllowed()?t.getDropPositionByCursor(e.y,s):r.Append:r.Inside:r.Inside}isRestrictedArea(e,t){const{top:r,bottom:s}=u.getBounds(t);return this.isRestrictedTopArea()&&e>r||this.isRestrictedBottomArea()&&e<s}static isCursorInMiddle(e,t){const{top:r,bottom:s}=u.getBounds(t);return e>r&&e<s}static getBounds(e){const r=t.calculateVerticalCenter(e),s=e.height/4;return{top:r-s,bottom:r+s}}}class b extends s{constructor(e,t,r){super(e,t,r)}isExpandCollapseHotkey(e){const t=p.KeyUtils.getEventKeyCode(e);return(t===p.KeyCode.Right||t===p.KeyCode.Left)&&(this.isMacOSPlatform?e.metaKey:e.ctrlKey)}handleArrowLeftKeyDown(e){return this.isExpandCollapseHotkey(e)?(this.performShortcutEvent(e),!0):super.handleArrowLeftKeyDown(e)}handleArrowRightKeyDown(e){return this.isExpandCollapseHotkey(e)?(this.performShortcutEvent(e),!0):super.handleArrowRightKeyDown(e)}}class h extends o{constructor(e,t){super(e,t)}createTableBodyItemStrategy(e){return this.isVirtualScrollingEnabled(e)?new g(this,this.grid,e):new j(this,this.grid,e)}}class j extends i{constructor(e,t,r){super(e,t,r)}createDataRowStrategy(e){return new b(this,this.grid,e)}}class g extends a{constructor(e,t,r){super(e,t,r)}createDataRowStrategy(e){return new b(this,this.grid,e)}}class f extends n{constructor(e){super(e)}createDataTableStrategy(e){return new h(this.grid,e)}}class x extends d{constructor(e){super(e)}isDataCellInteractiveElement(e){return!!e&&(e.matches(m.TreeNodeExpandControlsCell)||e.matches(m.TreeNodeExpandButton))}}class y extends l{constructor(){super()}getTagName(){return c}get bypassNonInlineHoverTitleElementChildSelector(){return m.TreeNodeExpandControlsContainer}allowInplaceEditingOnCellElementClick(e){return!e.matches(`${m.TreeNodeExpandButton} *`)}createRowDraggingHelper(){return new u(this)}createRootKeyboardNavigationStrategy(){return new f(this)}createEditorManager(){return new x(this)}}customElements.define(c,y);const C={loadModule:function(){}};export{y as DxTreeList,C as default};
