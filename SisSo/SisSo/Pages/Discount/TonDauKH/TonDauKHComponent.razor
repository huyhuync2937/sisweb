@page "/tondaukh"
@page "/tondaukh/{menu_id}"
@inject IDbManager myDb
@inject NavigationManager navigation
@inject Statemanagerment myStatemanagerment
@inject ICommandManager Commands
@implements IDisposable
@inject ILocalStorageService Localstore
@inject IJSRuntime JavacriptS
@inject IStringLocalizer<EditFormTonDauKH> Lap
@inject IStringLocalizer<App> Lat

@attribute [Authorize(Roles = "admin,tondaukh")]

<div class="row m-0 align-items-center">
    <h3 class="col p-0">@_page_title</h3>
    <label class="col-md-1 col-sm-2 text-end">@Lap["Year"].ToString()</label>
    <DxSpinEdit CssClass="col-md-1 col-sm-2" Value="@Nam" ValueExpression="@(() =>  Nam)" ValueChanged="@((int value)=>{OnNamChanged(value);})"></DxSpinEdit>
</div>

@if (ShowLoadding)
{
    <div class="row m-0 p-0 justify-content-center">
        <div class="spinner-border text-primary" role="status" style="width: 5rem; height:5rem;border-width:3px;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

<FrmBrowseComponent @ref="oBrowse" Page_size="@pageSize" TblData="@TblData" Fbrowse="@fbrowse" CssClass="gridct-frm-height" SelectItem="CurItem" IsLangEn="@IsLangEn"></FrmBrowseComponent>

@if (IsShowFrmKetchuyen)
{
    <FrmKetchuyen Closeform="ClosePostVoucher"></FrmKetchuyen>
}

<XacnhanComponent Content="@Deletemessage" Xacnhanxoa="Dongyxoa"></XacnhanComponent>

@code {
    [Parameter]
    public string menu_id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    ClaimsPrincipal userCliams;
    private string fbrowse = "";
    private string Deletemessage { get; set; }
    private DataTable TblData { get; set; }
    object SelectedDataItem { get; set; }
    FrmBrowseComponent oBrowse;
    private string mPage = "tondaukh";
    private string editPage = "frmtondaukh";
    private Command curCommand = new Command();
    private Dmdm CurDmdm = new Dmdm();
    private string ToastMessage { get; set; } = "";
    private string ToastId = "tondaukhdID";
    private string sqlTableName = "dmdtkh";
    private string sqlTableView = "v_dmdtkh";
    private string SqlTableKey = "ma_kh;nam";
    private string SqlTableKeyValue = "";
    private string SqlTableKeyValueYear = "";
    private int pageSize = 20;
    private string userLang { get; set; } = "";
    private bool IsLangEn = false;
    private string _page_title = "";
    private string store_proc = "";
    private int Nam = DateTime.Now.Year;
    bool ShowLoadding = true;
    bool IsShowFrmKetchuyen = false;
    void ClosePostVoucher(bool value)
    {
        IsShowFrmKetchuyen = value;
        StateHasChanged();
    }
    async void OnNamChanged(int value)
    {
        Nam = value;
        ShowLoadding = true;
        StateHasChanged();
        await Loaddata();
        ShowLoadding = false;
        StateHasChanged();
    }
    void CurItem(object obj)
    {
        SelectedDataItem = obj;
    }
    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(menu_id))
            menu_id = "we_bl_10";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userCliams = (await authenticationState).User;
            if (userCliams.IsInRole("admin") || userCliams.IsInRole(mPage.ToUpper()) || userCliams.IsInRole(mPage.ToLower()))
            {
                myStatemanagerment.SetToolBar(new MyToolbar("toolbar", true));
                myStatemanagerment.SetToolBar(new MyToolbar("New", true));
                myStatemanagerment.SetToolBar(new MyToolbar("Edit", true));
                myStatemanagerment.SetToolBar(new MyToolbar("Delete", true));
                myStatemanagerment.SetToolBar(new MyToolbar("View", true));
                myStatemanagerment.SetToolBar(new MyToolbar("Export", true));
                myStatemanagerment.AddToolBarButton("button1", "Kết chuyển điểm tồn");
            }
            else
            {
                myStatemanagerment.SetToolBar(new MyToolbar("toolbar", false));
            }
            curCommand = await Commands.GetSubMenuBymenuId(menu_id.Replace('_', '.'));
            if (curCommand != null)
            {
                store_proc = curCommand.Store_proc;
                _page_title = IsLangEn ? curCommand.Bar2 : curCommand.Bar;
                string _brorwse = IsLangEn ? curCommand.Ebrowse1 : curCommand.Vbrowse1;
                if (!string.IsNullOrEmpty(_brorwse))
                    fbrowse = _brorwse;
            }
            myStatemanagerment.OnActionTaskChanged += OnActionTaskchanged;
            myStatemanagerment.OnLangguaChanged += OnLangguachange;
            ShowLoadding = true;
            StateHasChanged();
            await Loaddata();
            ShowLoadding = false;
            await Language();
        }
    }

    private async void OnLangguachange(MyLang lang)
    {
        if (lang.IsnewLang)
            await Language();
    }
    async Task Language()
    {
        try
        {
            IsLangEn = false;
            userLang = await Localstore.GetItemAsync<string>("userlang");
            if (!string.IsNullOrEmpty(userLang))
            {
                if (userLang.Equals("En"))
                {
                    IsLangEn = true;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void Deleteitems()
    {
        DataRowView rview = (DataRowView)SelectedDataItem;
        if (rview == null)
        {
            myStatemanagerment.SetNewThongbao(Lat["No active record"]);
            return;
        }
        if (string.IsNullOrEmpty(rview[SqlTableKey].ToString()))
        {
            myStatemanagerment.SetNewThongbao(Lat["No active record"]);
            return;
        }

        SqlTableKeyValue = rview[SqlTableKey.Split(';')[0]].ToString().Trim();
        SqlTableKeyValueYear = rview[SqlTableKey.Split(';')[1]].ToString().Trim();
        Deletemessage = String.Format("{0}: {1}", Lap["Do you want to delete"].ToString(), SqlTableKeyValue);
        StateHasChanged();
    }
    private async Task Dongyxoa(bool status)
    {
        if (status)
        {
            string _value = SqlTableKeyValue + ";" + SqlTableKeyValueYear;
            string _condition = myDb.SqlJoinKeyValue(SqlTableKey, _value);
            string sql = string.Format("Delete {0} where {1}", sqlTableName, _condition);
            await myDb.ExecuteSqlQueryAsync(sql);
            ShowLoadding = true;
            StateHasChanged();
            await Loaddata();
            ShowLoadding = false;
            StateHasChanged();
            ToastMessage = String.Format(Lap["Delete successfully: {0}"], SqlTableKeyValue);
            myStatemanagerment.SetNewThongbao(ToastMessage);
        }
        Deletemessage = "";
    }

    async Task Loaddata()
    {
        string sql = string.Format("Select * from {0} where nam = '{1}' ", sqlTableView, Nam);
        DataSet ds = await myDb.LoadDataset(sql);
        TblData = ds.Tables[0];
        if (TblData.DefaultView.Count > 0)
            oBrowse.SetSelectRow(0);
        StateHasChanged();
    }
    private void OnActionTaskchanged(ActionTask ac)
    {
        switch (ac)
        {
            case ActionTask.New:
                myStatemanagerment.SetCurrentActionTask(ActionTask.New);
                Newitems();
                break;
            case ActionTask.Edit:
                myStatemanagerment.SetCurrentActionTask(ActionTask.Edit);
                Edititems();
                break;
            case ActionTask.View:
                myStatemanagerment.SetCurrentActionTask(ActionTask.View);
                Viewitems();
                break;
            case ActionTask.Delete:
                Deleteitems();
                break;
            case ActionTask.Export:
                ExportData(1); // 1 => .xlsx,2 => .xls, 3 => .csv
                break;
            case ActionTask.Button1:
                IsShowFrmKetchuyen = true;
                StateHasChanged();
                break;
        }
    }

    void ExportData(int type)
    {
        oBrowse.ExPortGrid(type);
        ToastMessage = Lap["Export successfully"];
        myStatemanagerment.SetNewThongbao(ToastMessage);
    }
    public void Dispose()
    {
        myStatemanagerment.OnActionTaskChanged -= OnActionTaskchanged;
        myStatemanagerment.OnLangguaChanged -= OnLangguachange;
    }
    void Newitems()
    {
        navigation.NavigateTo("/" + editPage + "/" + menu_id);
    }
    void Edititems()
    {
        DataRowView rview = (DataRowView)SelectedDataItem;
        if (rview == null)
        {
            myStatemanagerment.SetNewThongbao(Lat["No active record"]);
            return;
        }
        if (string.IsNullOrEmpty(rview[SqlTableKey.Split(';')[0]].ToString()))
        {
            myStatemanagerment.SetNewThongbao(Lat["No active record"]);
            return;
        }
        navigation.NavigateTo("/" + editPage + "/" + menu_id + "/" + rview[SqlTableKey.Split(';')[0]].ToString().Trim() + "/" + rview[SqlTableKey.Split(';')[1]].ToString().Trim());
    }

    void Viewitems()
    {
        DataRowView rview = (DataRowView)SelectedDataItem;
        if (rview == null)
        {
            myStatemanagerment.SetNewThongbao(Lat["No active record"]);
            return;
        }
        if (string.IsNullOrEmpty(rview[SqlTableKey.Split(';')[0]].ToString()))
        {
            myStatemanagerment.SetNewThongbao(Lat["No active record"]);
            return;
        }
        navigation.NavigateTo("/" + editPage + "/" + menu_id + "/" + rview[SqlTableKey.Split(';')[0]].ToString().Trim() + "/" + rview[SqlTableKey.Split(';')[1]].ToString().Trim());
    }
}
