@page "/dmdvcs"
@page "/dmdvcs/{menu_id}"
@using System.Data
@using SisData.Data
@using SisData.Model
@using SisData.Service
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbManager myDb
@inject NavigationManager navigation
@inject Statemanagerment myStatemanagerment
@inject ICommandManager Commands
@implements IDisposable
@using Blazored.LocalStorage;
@inject ILocalStorageService Localstore
@inject IJSRuntime JavacriptS
@using System.Security.Claims
@attribute [Authorize(Roles = "admin,dmdvcs")]

<FrmBrowseComponent @ref="oBrowse" TblData="@TblData" Fbrowse="@fbrowse" SelectItem="CurItem" IsLangEn="@IsLangEn"></FrmBrowseComponent>
<XacnhanComponent Content="@Deletemessage" Xacnhanxoa="Dongyxoa"></XacnhanComponent>

@code {
    [Parameter]
    public string menu_id { get; set; } 
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    FrmBrowseComponent oBrowse;
    ClaimsPrincipal userCliams;
    private string fbrowse = "";
    private string Deletemessage { get; set; } = "";
    private DataTable TblData { get; set; }
    private string mPage = "dmdvcs";
    private string editPage = "frmdmdvcs";
    private Command curCommand = new Command();
    private Dmdm CurDmdm = new Dmdm();
    private string ToastMessage { get; set; } = "";
    private string ToastId = "DVCSId";
    private static string sqlTableName = "dmdvcs";
    private static string sqlTableView = "v_dmdvcs";
    private static string SqlTableKey = "ma_dvcs";
    private static string SqlTableKeyValue = "";
    object SelectedDataItem { get; set; }
    private int pageSize = 10;

    void CurItem(object obj)
    {
        SelectedDataItem = obj;
    }   

    private async Task Dongyxoa(bool status)
    {
        if (status)
        {
            string sql = "Delete " + sqlTableName + " where " + SqlTableKey + "='" + SqlTableKeyValue + "'";
            await myDb.ExecuteSqlQueryAsync(sql);
            await Loaddata();
            ToastMessage = "Xóa thành công: " + SqlTableKeyValue;
            await JavacriptS.InvokeVoidAsync("ShowToast", ToastId);
            StateHasChanged();
        }
        Deletemessage = "";
    }
    async Task Loaddata()
    {
        string sql = "Select * from " + sqlTableView + " where status='1'";
        DataSet ds = await myDb.LoadDataset(sql);
        TblData = ds.Tables[0];       

    }
    async Task PageLoad()
    {
        curCommand = await Commands.GetSubMenuBymenuId(menu_id.Replace("_", "."));
        if (curCommand != null)
        {
            string sql = "select * from dmdm where ma_dm = '" + curCommand.Mobile_page + "'";
            DataSet ds = await myDb.LoadDataset(sql);
            List<Dmdm> lsdm = myDb.ConvertDataTable<Dmdm>(ds.Tables[0]);
            if (lsdm != null && lsdm.Count > 0)
            {
                CurDmdm = lsdm[0];
                if (CurDmdm != null)
                {
                    fbrowse = IsLangEn ? CurDmdm.Full_field2 : CurDmdm.Full_field;
                    sqlTableName = CurDmdm.Table_name.Trim();
                    sqlTableView = CurDmdm.table_view.Trim();
                    SqlTableKey = CurDmdm.Key.Trim();
                    if (CurDmdm.Nrow > 0)
                        pageSize = CurDmdm.Nrow;
                }
            }
        }
        StateHasChanged();
    }   

    private void OnActionTaskchanged(ActionTask ac)
    {
        switch (ac)
        {
            case ActionTask.New:
                DataRowView rview = (DataRowView)SelectedDataItem;
                myStatemanagerment.SetCurrentActionTask(ActionTask.New);
                if (rview == null)
                {
                    navigation.NavigateTo(editPage + "/" + menu_id + "/-");
                }
                else
                {
                    navigation.NavigateTo(editPage + "/" + menu_id + "/" + rview[SqlTableKey].ToString().Trim());
                }
                break;
            case ActionTask.Edit:
                myStatemanagerment.SetCurrentActionTask(ActionTask.Edit);
                Edititems();
                break;
            case ActionTask.View:
                myStatemanagerment.SetCurrentActionTask(ActionTask.View);
                Viewitems();
                break;
            case ActionTask.Delete:
                Deleteitems();
                break;
        }
    }
    private void Deleteitems()
    {
        DataRowView rview = (DataRowView)SelectedDataItem;
        if (rview != null)
        {
            if (!string.IsNullOrEmpty(rview[SqlTableKey].ToString()))
                SqlTableKeyValue = rview[SqlTableKey].ToString().Trim();
            Deletemessage = "Có phải bạn muốn xóa: " + SqlTableKeyValue;
            StateHasChanged();
        }
    }
    void Edititems()
    {
        DataRowView rview = (DataRowView)SelectedDataItem;
        if (rview != null)
        {
            navigation.NavigateTo(editPage + "/" + menu_id + "/" +rview[SqlTableKey].ToString());
        }
    }

    void Viewitems()
    {
        DataRowView rview = (DataRowView)SelectedDataItem;
        if (rview != null)
        {
            navigation.NavigateTo(editPage + "/" + menu_id + "/" + rview[SqlTableKey].ToString());
        }
    }
    public void Dispose()
    {
        myStatemanagerment.OnActionTaskChanged -= OnActionTaskchanged;
        myStatemanagerment.OnLangguaChanged -= OnLangguachange;
    }

    private string userLang { get; set; } = "";
    private bool IsLangEn = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PageLoad();
            userCliams = (await authenticationState).User;
            if (userCliams.IsInRole("admin") || userCliams.IsInRole(mPage))
            {
                myStatemanagerment.SetToolBar(new MyToolbar("toolbar", true));
                myStatemanagerment.SetToolBar(new MyToolbar("New", true));
                myStatemanagerment.SetToolBar(new MyToolbar("Edit", true));
                myStatemanagerment.SetToolBar(new MyToolbar("Delete", true));
                myStatemanagerment.SetToolBar(new MyToolbar("View", true));
                myStatemanagerment.SetToolBar(new MyToolbar("Export", true));
            }
            else
            {
                myStatemanagerment.SetToolBar(new MyToolbar("toolbar", false));
            }
            myStatemanagerment.OnActionTaskChanged += OnActionTaskchanged;
            myStatemanagerment.OnLangguaChanged += OnLangguachange;
            ToastMessage = myStatemanagerment.GetThongbao();
            if (!string.IsNullOrEmpty(ToastMessage))
            {
                myStatemanagerment.SetNewThongbao("");
                await JavacriptS.InvokeVoidAsync("ShowToast", ToastId);
            }
            await Loaddata();
            await Language();
        }
    }
    private async void OnLangguachange(MyLang lang)
    {
        if (lang.IsnewLang)
        {
            await Language();
        }
    }
    async Task Language()
    {
        try
        {
            IsLangEn = false;
            userLang = await Localstore.GetItemAsync<string>("userlang");
            if (!string.IsNullOrEmpty(userLang))
            {
                if (userLang.Equals("En"))
                {
                    IsLangEn = true;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
