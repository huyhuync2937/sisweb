@inherits FrmListBaseComponent
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment WebHostEnvironment
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Data.OleDb
@using System.Diagnostics;
@using System.Data.SqlClient;

<div class="w-100">
    <div class=" m-1 me-2 rounded-1  bg-light">
        <div class="d-flex justify-content-end gap-2 me-3">
            <DxButton Text="Nhận"
                      RenderStyle="ButtonRenderStyle.Secondary"
                      Click="@InsertDataToDatabase"
                      CssClass="px-4  my-1" />
            <DxButton Text="Hủy"
                      RenderStyle="ButtonRenderStyle.Danger"
                      Click="@Cancel"
                      CssClass="px-4  my-1" />
        </div>
   </div>
    <div class="row m-2 rounded-1 border  border-1 ">
        <DxFormLayout Data="@CurDmvt" ItemSizeMode="@Itemsizemode" CssClass="frm-header sis-form my-2" onkeydown="ModifyEnterKeyPressAsTab(event);">
            <DxFormLayoutItem Caption="@Lap["Data transferred"]" ColSpanMd="12" CaptionCssClass="fw-bold">
                <Template>
                    <DxTextBox Text="Danh mục vật tư" Enabled="@AllowEditMa" ReadOnly="true" />
                </Template>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" Caption="@Lap["File name"]" BeginRow="true">
                <div class="row m-0 p-0">

                    <DxTextBox @bind-Text="@FilePath" ReadOnly="true" CssClass="col-6 m-0 p-0" />
                    <DxButton Id="overviewDemoSelectButton"
                              CssClass="col-2 m-0 p-0"
                              RenderStyle="ButtonRenderStyle.Primary"
                              Text="..." />
                    <DxButton Text="@Lap["See"]"
                              RenderStyle="ButtonRenderStyle.Secondary"
                              CssClass="col-2 m-0 p-0"
                              Click="@OpenExcelFile" />
                    <DxButton Text="@Lap["Download example"]"
                              RenderStyle="ButtonRenderStyle.Secondary"
                              CssClass="col-2 m-0 p-0"
                              Click="DownloadExamle" />
                </div>
            </DxFormLayoutItem>

        </DxFormLayout>

    </div>

</div>
<DxFileInput Visible="@UploadVisible"
             ExternalSelectButtonCssSelector="#overviewDemoSelectButton"
             ExternalDropZoneCssSelector="#overviewDemoDropZone"
             ExternalDropZoneDragOverCssClass="custom-drop-zone-hover"
             MaxFileSize="15000000"
             Multiple="false"
             FilesUploading="OnFilesUploading"
             SelectedFilesChanged="@SelectedFilesChanged">
</DxFileInput>
<DxPopup @bind-Visible="@isPopupVisible"
         HeaderText="Dữ liệu Excel"
         Width="80%"
         Height="600px"
         ShowCloseButton="true"
         CloseOnOutsideClick="true">
    <BodyContentTemplate>
        @if (dataExcel == null || dataExcel.Rows.Count == 0)
        {
            <p>Không có dữ liệu để hiển thị.</p>
        }
        else
        {
            <DxGrid Data="@dataExcel"
                    ShowBorders="true"
                    ShowRowLines="true"
                    ColumnAutoWidth="true"
                    CssClass="p-2"
                    HorizontalScrollMode="HorizontalScrollMode.Auto"
                    ShowPager="true"
                    PageSize="20">
                <Columns>
                    @foreach (DataColumn col in dataExcel.Columns)
                    {
                        <DxGridDataColumn FieldName="@col.ColumnName" Width="150px" />
                    }
                </Columns>
            </DxGrid>
            @*  <div class="mt-3">
                <DxButton Text="Chèn dữ liệu vào cơ sở dữ liệu" Click="InsertDataToDatabase" />
            </div> *@
        }
    </BodyContentTemplate>
</DxPopup>

@code {
    private DataTable dataExcel;
    public Dmvt CurDmvt;
    bool UploadVisible { get; set; } = false;
    bool isPopupVisible { get; set; } = false;
    public IEnumerable<string> Tags { get; set; }
    char Placeholder = '#';
    private string menu_id = "ws.dm.03";
    [Parameter] public bool Visible { get; set; }
    private List<List<string>> data = null;
    // private List<Dictionary<string, string>> dataExcel;
    public static string TCNV3String = "ÊÈèÉÌéÐÒÕúóÓÔíÝáãìõâêòµ\u00b8¶·¹\u00a8»¾¼½Æ©ÇË®ÎÏÑªÖ×ØÜÞßäôù«åæç¬ëîïñ­øö÷ýûüþ¡¢§£¤¥¦";
    public static string UnicodeString = "ấẩốẫèộéềếỳúểễớíỏóỡừõờũàáảãạăằắẳẵặâầậđẻẽẹêệìỉĩịòọụựôồổỗơởợùủưứửữýỷỹỵĂÂĐÊÔƠƯ";
    public static string StrBrowse = "";
    public static string StrBrowseKhoa = "";
    public static string StrBrowseKhoa_dac_biet = "";
    private List<Dictionary<string, object>> excelRows = new();
    [Parameter]
    public bool IsImportPopupVisible { get; set; }
    [Parameter]
    public EventCallback<bool> IsImportPopupVisibleChanged { get; set; }
    public string fileName { get; set; } = "";
    public DataSet dataImport { get; set; } = new DataSet();
    [Parameter]
    public EventCallback OnImportCompleted { get; set; }

    protected override void OnInitialized()
    {
        sqlTableName = "Dmvt";
        SqlTableKey = "Ma_vt";
        CheckSqlTableKey = "Ma_vt";
        ParentPage = String.IsNullOrEmpty(ParentPage) ? "invt" : ParentPage;
        CurDmvt = new Dmvt();

        if (String.IsNullOrEmpty(Menu_id))
            Menu_id = menu_id;

        base.OnInitialized();
    }

    private DxFileInput fileInput;
    private string PhieuNhapKho { get; set; } = "";
    private string FilePath { get; set; } = "";

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        var fileList = files.ToList();
        UploadVisible = fileList.Count > 0;

        if (fileList.Count > 0)
        {
            FilePath = fileList[0].Name; // Chỉ hiển thị tên file
        }

        InvokeAsync(StateHasChanged);
    }

    private void ConvertDataTableToList(DataTable table)
    {
        excelRows = new List<Dictionary<string, object>>();
        foreach (DataRow row in table.Rows)
        {
            var dict = new Dictionary<string, object>();
            foreach (DataColumn col in table.Columns)
            {
                dict[col.ColumnName] = row[col];
            }
            excelRows.Add(dict);
        }
        Console.WriteLine("Số cột: " + excelRows);


    }
    private async Task SaveDM()
    {
        var baseUrl = NavigationManager.BaseUri;
        FilePath = $"/uploads/DMVTIMEX.xls";

        var saveFileResp = await Http.GetAsync($"{baseUrl}api/Upload/SaveFile/DMVTIMEX.xls");
        saveFileResp.EnsureSuccessStatusCode();
        OpenExcelFile();
    }
    private async Task Cancel()
    {
        await IsImportPopupVisibleChanged.InvokeAsync(false);
    }


    private async Task OpenExcelFile()
    {

        if (!string.IsNullOrEmpty(FilePath))
        {
            // var fileName = Path.GetFileName(FilePath);
            // // var fullPath = Path.Combine(WebHostEnvironment.WebRootPath, fileName);
            // var fullPath = Path.Combine(Directory.GetCurrentDirectory(), fileName);
            // Directory.CreateDirectory(Path.GetDirectoryName(fullPath));
            // if (!File.Exists(fullPath))
            // {
            //     myStateMN.SetNewThongbao(Lap["Tệp không tồn tại trên server"]);
            //     return;
            // }
            dataExcel = GetDataFromExcel(fileName);
            if (dataExcel == null || dataExcel.Rows.Count == 0)
            {
                myStateMN.SetNewThongbao(Lap["Không có dữ liệu trong file Excel"]);
                return;
            }
            Console.WriteLine("Số cột: " + dataExcel.Columns.Count);
            foreach (DataColumn col in dataExcel.Columns)
            {
                Console.WriteLine("Tên cột: " + col.ColumnName);
            }
            ConvertDataTableToList(dataExcel);
            CleanDataTable(dataExcel);
            isPopupVisible = true;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            myStateMN.SetNewThongbao(Lap["Vui lòng chọn tệp trước khi xem"]);
        }
    }

    protected async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        var baseUrl = NavigationManager.BaseUri;

        var file = args.Files[0];
        if (!file.Name.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
        {
            myStateMN.SetNewThongbao(Lap["Vui lòng chọn file Excel (.xls)"]);
            return;
        }

        try
        {

            var fileContent = new StreamContent(file.OpenReadStream(file.Size));
            var content = new MultipartFormDataContent();
            content.Add(fileContent, "myFile", file.Name);
            using var stream = new System.IO.MemoryStream();
            await file.OpenReadStream(file.Size).CopyToAsync(stream);

            var response = await Http.PostAsync($"{baseUrl}api/Upload/UploadFile", content);
            response.EnsureSuccessStatusCode();

            // var saveFileResp = await Http.GetAsync($"{baseUrl}api/Upload/SaveFile/{file.Name}");
            // saveFileResp.EnsureSuccessStatusCode();

            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot\\upload_tmp", file.Name);
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));

            var dtImport = GetData(filePath);
            fileName = filePath;
            dataImport = dtImport;

            // InsertDataToDatabase(dtImport, sqlTableName);

            // await using FileStream fs = new(filePath, FileMode.Create);
            // await file.OpenReadStream().CopyToAsync(fs);

            // dataExcel = new List<Dictionary<string, string>>();


            // var uploadPath = Path.Combine(WebHostEnvironment.WebRootPath, "files");
            // if (!Directory.Exists(uploadPath))
            // {
            //     Directory.CreateDirectory(uploadPath);
            // }

            // myStateMN.SetNewThongbao("Import dữ liệu s");
            await InvokeAsync(StateHasChanged);


        }
        catch (Exception ex)
        {
            myStateMN.SetNewThongbao(Lap[$"Lỗi khi import dữ liệu: {ex.Message}"]);
        }
    }





    bool CheckValid()
    {
        if (string.IsNullOrEmpty(CurDmvt.Ten_vt))
        {
            myStateMN.SetNewThongbao(Lap["No customer name entered"]);
            StateHasChanged();
            return false;
        }
        return true;

    }
    public DataSet GetData(String info)
    {
        DataSet dtImport = new DataSet();
        try
        {
            DataTable dataFromExcel = GetDataFromExcel(info);
            string tableName = sqlTableName;
            if (tableName == null || tableName == "")
            {
                return null;
            }
            string sql = $"SELECT * FROM information_schema.columns WHERE table_name like '{tableName.Trim()}'";
            DataSet dataSet = myDb.LoadDataSet(sql);
            if (dataSet == null || dataSet.Tables.Count == 0)
            {
                return null;
            }
            dataSet.Tables[0].TableName = "StrucImex";
            DataTable structTable = dataSet.Tables[0];
            if (dataFromExcel == null || structTable == null)
            {
                return null;
            }
            dtImport.Tables.Add(dataFromExcel.Copy());
            dtImport.Tables.Add(structTable.Copy());
            ConverDateTime(ref dtImport);
            // if (convertFont.Trim() == "2")
            // {
            // ConverFont(ref dtImport);
            // }
        }
        catch (Exception ex)
        {

            return null;
        }
        return dtImport;
    }

    public static DataTable XoaDongTrang(DataTable tbExcel)
    {
        bool flag = false;
        DataTable dataTable = tbExcel.Clone();
        for (int i = 0; i < tbExcel.Rows.Count; i++)
        {
            flag = false;
            for (int j = 1; j < tbExcel.Columns.Count; j++)
            {
                if (tbExcel.Rows[i][j].ToString().Trim() != "")
                {
                    flag = true;
                    break;
                }
            }
            if (flag)
            {
                dataTable.ImportRow(tbExcel.Rows[i]);
            }
        }
        return dataTable;
    }

    public static void XoaCotTrang(ref DataTable tbExcel)
    {
        string text = "";
        int result = 0;
        for (int i = 0; i < tbExcel.Columns.Count; i++)
        {
            text = tbExcel.Columns[i].ColumnName.Trim();
            if (text.IndexOf("F") == 0 && int.TryParse(text.Substring(1, text.Length - 1), out result))
            {
                tbExcel.Columns.Remove(text);
                i = -1;
            }
        }
    }
    // Làm sạch DataTable để xử lý giá trị rỗng
    private void CleanDataTable(DataTable table)
    {
        foreach (DataRow row in table.Rows)
        {
            foreach (DataColumn col in table.Columns)
            {
                if (row[col] == null || row[col] == DBNull.Value || string.IsNullOrWhiteSpace(row[col]?.ToString()))
                {
                    row[col] = DBNull.Value;
                    Console.WriteLine($"Dòng {table.Rows.IndexOf(row)}, cột {col.ColumnName} rỗng, gán DBNull.");
                }
            }
        }
    }
    public static DataTable GetDataFromExcel(string _fileName)
    {
        string text = "Yes";
        string text2 = "";
        text2 = ((!_fileName.Contains(".xls")) ? ("Provider=Microsoft.ACE.OLEDB.16.0;Data Source=" + _fileName + ";Extended Properties=\"Excel 8.0;HDR=" + text + ";IMEX=1\"") : ("Provider=Microsoft.ACE.OLEDB.16.0;Data Source=" + _fileName + ";Extended Properties=\"Excel 12.0;HDR=" + text + ";IMEX=1\""));
        DataSet dataSet = new DataSet();
        using (OleDbConnection oleDbConnection = new OleDbConnection(text2))
        {
            bool flag = false;
            try
            {
                oleDbConnection.Open();
                flag = true;
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("OLEDB"))
                {
                    try
                    {
                        oleDbConnection.Open();
                        flag = true;
                    }
                    catch (Exception ex2)
                    {
                        return null;
                    }
                }
            }
            if (flag)
            {
                try
                {
                    // DataTable oleDbSchemaTable = oleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[4]
                    // {
                    //         null,
                    //         null,
                    //         null,
                    //         "TABLE"
                    // });
                    DataTable dtSchema = oleDbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    string sheetName = null;
                    foreach (DataRow row in dtSchema.Rows)
                    {
                        string tableName = row["TABLE_NAME"].ToString();
                        if (!tableName.ToLower().Contains("hướng dẫn")) // Bỏ qua sheet có tên chứa "Hướng dẫn"
                        {
                            sheetName = tableName;
                            break; // Lấy sheet đầu tiên không phải "Hướng dẫn"
                        }
                    }

                    if (string.IsNullOrEmpty(sheetName))
                    {
                        oleDbConnection.Close();
                        return null; // Không tìm thấy sheet phù hợp
                    }
                    // IEnumerator enumerator = oleDbSchemaTable.Rows.GetEnumerator();
                    // try
                    // {
                    //     if (enumerator.MoveNext())
                    //     {
                    // DataRow dataRow = (DataRow)enumerator.Current;
                    // string text4 = dataRow["TABLE_NAME"].ToString();

                    // string sheetName = dtSchema.Rows[0]["TABLE_NAME"].ToString();

                    OleDbCommand oleDbCommand = new OleDbCommand("SELECT * FROM [" + sheetName + "]", oleDbConnection);
                    oleDbCommand.CommandType = CommandType.Text;
                    DataTable dataTable = new DataTable(sheetName);
                    dataSet.Tables.Add(dataTable);
                    new OleDbDataAdapter(oleDbCommand).Fill(dataTable);
                    //     }
                    // }
                    // finally
                    // {
                    //     IDisposable disposable = enumerator as IDisposable;
                    //     if (disposable != null)
                    //     {
                    //         disposable.Dispose();
                    //     }
                    // }
                }
                catch (Exception ex)
                {

                    oleDbConnection.Close();
                    return null;
                }
                oleDbConnection.Close();
            }
        }
        if (dataSet.Tables.Count == 0)
        {
            return null;
        }
        DataTable tbExcel = XoaDongTrang(dataSet.Tables[0]);
        XoaCotTrang(ref tbExcel);
        tbExcel.TableName = "DataExcel";
        return SetColumnName(tbExcel);
    }

    private static DataTable SetColumnName(DataTable tb)
    {
        try
        {
            // string[] source = text.Split(';');
            // string[] source2 = key.Split(';');
            string text2 = "";
            string text3 = "";
            string text4 = "";
            for (int i = 0; i < tb.Columns.Count; i++)
            {
                string text5 = tb.Columns[i].ColumnName.ToString();
                int num = text5.LastIndexOf('(');
                int num2 = text5.LastIndexOf(')');
                if (num == -1 || num2 == -1 || num >= num2)
                {

                    tb.Columns[i].ColumnName = text5;
                    continue;
                }
                string text6 = text5.Substring(num + 1, num2 - num - 1).Trim();
                string str = text6 + ":H=" + text5.Substring(0, num - 1).Trim().Replace('_', ' ') + text5.Substring(num2 + 1, text5.Length - num2 - 1).Trim();
                text2 = text2 + str + ";";
                // if (source2.Contains(text6))
                // {
                text3 = text3 + str + ";";
                // }
                // if (source.Contains(text6))
                // {
                text4 = text4 + str + ";";
                // }
                tb.Columns[i].ColumnName = text6;
            }
            StrBrowse = text2.Substring(0, text2.Length - 1);
            if (text3.Length > 1)
            {
                StrBrowseKhoa = text3.Substring(0, text3.Length - 1);
            }
            if (text4.Length > 1)
            {
                StrBrowseKhoa_dac_biet = text4.Substring(0, text4.Length - 1);
            }
            StrBrowse = StrBrowse.Replace("#", ".");
            StrBrowseKhoa = StrBrowseKhoa.Replace("#", ".");
            StrBrowseKhoa_dac_biet = StrBrowseKhoa_dac_biet.Replace("#", ".");
        }
        catch (Exception ex)
        {
            return null;
        }
        return tb;
    }

    public DataTable GetStructTable(string tableName)
    {
        if (tableName == null || tableName == "")
        {
            return null;
        }
        string sql = $"SELECT * FROM information_schema.columns WHERE table_name like '{tableName.Trim()}'";
        DataSet dataSet = myDb.LoadDataSet(sql);
        if (dataSet == null || dataSet.Tables.Count == 0)
        {
            return null;
        }
        dataSet.Tables[0].TableName = "StrucImex";
        return dataSet.Tables[0];
    }

    public static void ConverFont(ref DataSet dtImport)
    {
        for (int i = 0; i < dtImport.Tables["DataExcel"].Rows.Count; i++)
        {
            for (int j = 0; j < dtImport.Tables["DataExcel"].Columns.Count; j++)
            {
                DataRow[] array = dtImport.Tables["StrucImex"].Select("column_name = '" + dtImport.Tables["DataExcel"].Columns[j] + "'");
                if (array.Length <= 0)
                {
                    continue;
                }
                int result = 0;
                if (int.TryParse(array[0]["character_maximum_length"].ToString(), out result) && result != -1)
                {
                    string value = ConvertTcvn3ToUnicode(dtImport.Tables["DataExcel"].Rows[i][j].ToString().Trim());
                    if (!string.IsNullOrEmpty(value))
                    {
                        dtImport.Tables["DataExcel"].Rows[i][j] = value;
                    }
                }
            }
        }
    }

    private static void ConverDateTime(ref DataSet dtImport)
    {
        for (int i = 0; i < dtImport.Tables["DataExcel"].Rows.Count; i++)
        {
            for (int j = 0; j < dtImport.Tables["DataExcel"].Columns.Count; j++)
            {
                DataRow[] array = dtImport.Tables["StrucImex"].Select("column_name = '" + dtImport.Tables["DataExcel"].Columns[j] + "'");
                if (array.Length > 0 && array[0]["data_type"].ToString().Trim() == "smalldatetime" && !dtImport.Tables["DataExcel"].Rows[i][j].GetType().FullName.Equals("System.DateTime"))
                {
                    string[] array2 = dtImport.Tables["DataExcel"].Rows[i][j].ToString().Replace(" ", "").Replace("/", "-")
                        .Split('-');
                    if (array2.Length == 3)
                    {
                        dtImport.Tables["DataExcel"].Rows[i][j] = array2[2].Substring(0, 4) + ((array2[1].Length > 1) ? array2[1] : ("0" + array2[1])) + ((array2[0].Length > 1) ? array2[0] : ("0" + array2[0]));
                    }
                }
            }
        }
    }

    public static string MaKiemTraKyTuDacBiet(string ma_iemx)
    {
        switch (ma_iemx)
        {
            case "AP01":
                return "ma_kh";
            case "AP02":
                return "ma_nh";
            case "CO01":
                return "ma_vv";
            case "CO02":
                return "ma_phi";
            case "GL01":
                return "tk0";
            case "IN01":
                return "ma_vt";
            case "IN02":
                return "ma_kho";
            case "IN03":
                return "ma_nh";
            case "TN01":
                return "ma_ns";
            default:
                return "";
        }
    }

    public static List<char> GetAllChar(string s)
    {
        List<char> list = new List<char>();
        int length = s.Length;
        for (int i = 0; i < length; i++)
        {
            if (!list.Contains(s[i]) && TCNV3String.Contains(s[i]))
            {
                list.Add(s[i]);
            }
        }
        int count = list.Count;
        for (int i = 0; i < count - 1; i++)
        {
            for (int j = i + 1; j < count; j++)
            {
                if (TCNV3String.IndexOf(list[i]) > TCNV3String.IndexOf(list[j]))
                {
                    char value = list[i];
                    list[i] = list[j];
                    list[j] = value;
                }
            }
        }
        return list;
    }

    public static string ConvertTcvn3ToUnicode(string input)
    {
        input = input.Trim();
        List<char> allChar = GetAllChar(input);
        int num = allChar.Count();
        for (int i = 0; i < num; i++)
        {
            int num2 = TCNV3String.IndexOf(allChar[i]);
            if (num2 >= 0)
            {
                input = input.Replace(TCNV3String[num2], UnicodeString[num2]);
            }
        }
        return input;
    }

    public async void DownloadExamle()
    {
        try
        {
            var baseUrl = NavigationManager.BaseUri;
            var FilePath = $"/EX_mau/DMVTIMEX.xls";
            NavigationManager.NavigateTo(FilePath, forceLoad: true);
            myStateMN.SetNewThongbao("Tải file thành công");
        }
        catch (Exception ex)
        {
            myStateMN.SetNewThongbao(Lap["Tải thất bại: "] + ex.Message);
        }
    }


    public async void InsertDataToDatabase()
    {
        if (dataImport == null || dataImport.Tables["DataExcel"] == null || string.IsNullOrEmpty(sqlTableName))
        {
            myStateMN.SetNewThongbao(Lap["Lỗi khi import dữ liệu"]);
            return;
        }

        try
        {
            DataTable dataExcel = dataImport.Tables["DataExcel"];
            DataTable structTable = dataImport.Tables["StrucImex"];

            string columns = "";
            foreach (DataRow row in structTable.Rows)
            {
                string columnName = row["column_name"].ToString();
                if (dataExcel.Columns.Contains(columnName))
                {
                    columns += $"[{columnName}],";
                }
            }
            if (string.IsNullOrEmpty(columns))
            {
                myStateMN.SetNewThongbao(Lap["Lỗi khi import dữ liệu"]);
                return;
            }
            columns = columns.TrimEnd(',');

            foreach (DataRow row in dataExcel.Rows)
            {
                DataTable tempTable = dataExcel.Clone();
                DataRow filteredRow = tempTable.NewRow();
                string values = "";
                foreach (DataRow structRow in structTable.Rows)
                {
                    string columnName = structRow["column_name"].ToString();
                    if (dataExcel.Columns.Contains(columnName))
                    {
                        // if (row[columnName] == null || row[columnName] == DBNull.Value || string.IsNullOrWhiteSpace(row[columnName]?.ToString()))
                        // {
                        //     filteredRow[columnName] = DBNull.Value;
                        // }
                        // else
                        // {
                        //     filteredRow[columnName] = row[columnName];
                        // }
                        if (row[columnName] == null || row[columnName] == DBNull.Value || string.IsNullOrWhiteSpace(row[columnName]?.ToString()))
                        {
                            values += "NULL,";
                        }
                        else
                        {
                            string value = row[columnName].ToString();
                            string dataType = structRow["data_type"]?.ToString().ToLower() ?? "nvarchar";
                            if (dataType.Contains("char") || dataType.Contains("text"))
                            {
                                value = "N'" + value.Replace("'", "''") + "'";
                            }
                            else if (dataType.Contains("date") || dataType.Contains("time"))
                            {
                                if (DateTime.TryParse(value, out DateTime dateValue))
                                {
                                    value = $"'{dateValue:yyyy-MM-dd HH:mm:ss}'";
                                }
                                else
                                {
                                    value = "NULL";
                                }
                            }
                            else if (dataType.Contains("int") || dataType.Contains("decimal") || dataType.Contains("float") || dataType.Contains("numeric"))
                            {
                                value = value.Replace(",", "."); // Đảm bảo định dạng số phù hợp
                            }
                            else
                            {
                                value = "N'" + value.Replace("'", "''") + "'";
                            }
                            values += $"{value},";
                        }
                    }
                }
                // tempTable.Rows.Add(filteredRow);

                // await myDb.InsertData(tableName, filteredRow, "");
                values = values.TrimEnd(',');

                string sql = $"INSERT INTO {sqlTableName} ({columns}) VALUES ({values})";

                await myDb.ExecuteSqlQueryAsync(sql);
            }
            myStateMN.SetNewThongbao(Lap["Import dữ liệu thành công"]);
            await OnImportCompleted.InvokeAsync();
            Cancel();

        }
        catch (Exception ex)
        {
            myStateMN.SetNewThongbao(Lap["Lỗi khi import dữ liệu"]);

        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            switch (curActionTask)
            {
                case ActionTask.View:
                    {
                        if (!string.IsNullOrEmpty(Ma_ma))
                            myStateMN.SetToolBar(new MyToolbar("save", false));
                        break;
                    }

            }
        }

    }


}